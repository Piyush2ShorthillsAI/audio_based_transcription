#!/usr/bin/env python3
"""Test if Gemini response is properly sent to frontend"""

import requests
import json
from pathlib import Path

BASE_URL = "http://localhost:8000"

def test_frontend_response():
    """Test the complete flow from frontend request to Gemini response"""
    print("🌐 TESTING FRONTEND RESPONSE FLOW")
    print("=" * 80)
    
    try:
        # Test 1: Server health check
        print("🏥 TEST 1: Server Health")
        print("-" * 40)
        
        response = requests.get(f"{BASE_URL}/health")
        if response.status_code == 200:
            print("✅ Server is healthy")
        else:
            print(f"❌ Server not healthy: {response.status_code}")
            return
        
        # Test 2: Check what the actual audio service returns
        print("\n🎵 TEST 2: Audio Service Response Structure")
        print("-" * 40)
        
        # Let's examine the actual return structure from our previous test
        print("📋 From our test, AudioServiceMinimal returns:")
        print("   {")
        print('     "email": {"subject": "Generated Email", "body": email_result},')
        print('     "analysis": {"text": "Generated by Gemini 2.5 Pro"},')
        print('     "processing_method": "direct_audio_to_gemini"')
        print("   }")
        
        print("\n📋 Main endpoint transforms this to:")
        print("   {")
        print('     "message": "Email generated successfully...",')
        print('     "email": result["email"],  # {"subject": "Generated Email", "body": "..."}')
        print('     "analysis": result.get("analysis", {}),')
        print('     "processing_method": result["processing_method"]')
        print("   }")
        
        # Test 3: Check if we can parse a sample Gemini response
        print("\n🤖 TEST 3: Gemini Response Parsing")
        print("-" * 40)
        
        sample_gemini_response = """**ANALYSIS** (in English):
Recipient: [Recipient Name], [Recipient Title]
Relationship: [e.g., Reporting Manager, Client, Colleague]
Details: [e.g., Following up on our conversation yesterday]
Purpose: [e.g., To provide a project update and request feedback]
Tone: Professional and informative
Action Needed: Review the attached document and provide feedback by a specific date.

**EMAIL** (in English):
Subject: [Clear, Specific Subject, e.g., Update on Project Alpha]

Dear [Recipient Name],

I hope this email finds you well.

This is a follow-up to our conversation regarding [mention topic]. As discussed, I have now completed the [task, e.g., initial draft of the Q3 report].

The key points are summarized below:
*   [Detail 1]
*   [Detail 2] 
*   [Detail 3]

Please find the full document attached for your review. I would appreciate it if you could provide your feedback by [Date/Time, e.g., end of day, Friday].

Please let me know if you have any questions.

Best regards,

[Your Name]"""
        
        # Test parsing the response
        def parse_gemini_response(response_text):
            """Parse Gemini response to extract subject and body"""
            lines = response_text.split('\n')
            
            analysis = []
            email_lines = []
            subject = "Generated Email"
            in_email_section = False
            
            for line in lines:
                if "**EMAIL**" in line:
                    in_email_section = True
                    continue
                elif "**ANALYSIS**" in line:
                    in_email_section = False
                    continue
                
                if not in_email_section and not line.strip().startswith("**EMAIL**"):
                    analysis.append(line)
                elif in_email_section:
                    if line.startswith("Subject:"):
                        subject = line.replace("Subject:", "").strip()
                    else:
                        email_lines.append(line)
            
            body = '\n'.join(email_lines).strip()
            analysis_text = '\n'.join(analysis).strip()
            
            return {
                "subject": subject,
                "body": body,
                "analysis": analysis_text
            }
        
        parsed = parse_gemini_response(sample_gemini_response)
        print(f"✅ Parsed subject: '{parsed['subject']}'")
        print(f"✅ Parsed body length: {len(parsed['body'])} characters")
        print(f"✅ Parsed analysis length: {len(parsed['analysis'])} characters")
        
        # Test 4: Check response format for frontend
        print("\n📡 TEST 4: Frontend Response Format")
        print("-" * 40)
        
        # Simulate what frontend would receive
        mock_response = {
            "message": "Email generated successfully from direct audio processing",
            "email": {
                "subject": parsed["subject"],
                "body": parsed["body"]
            },
            "analysis": {
                "text": parsed["analysis"]
            },
            "processing_method": "direct_audio_to_gemini"
        }
        
        print("✅ Frontend would receive:")
        print(f"   📧 Email subject: '{mock_response['email']['subject']}'")
        print(f"   📄 Email body: {len(mock_response['email']['body'])} characters")
        print(f"   📊 Analysis: {len(mock_response['analysis']['text'])} characters")
        print(f"   🔧 Processing method: {mock_response['processing_method']}")
        
        # Test 5: Check JSON serialization
        print("\n🔄 TEST 5: JSON Serialization")
        print("-" * 40)
        
        try:
            json_response = json.dumps(mock_response, indent=2)
            print("✅ Response can be serialized to JSON")
            print(f"✅ JSON response size: {len(json_response)} bytes")
            
            # Check if it can be deserialized
            deserialized = json.loads(json_response)
            print("✅ Response can be deserialized from JSON")
            
        except Exception as e:
            print(f"❌ JSON serialization error: {str(e)}")
        
        # Test 6: Identify potential issues
        print("\n⚠️  TEST 6: Potential Issues Check")
        print("-" * 40)
        
        issues_found = []
        
        # Check if subject is generic
        if mock_response["email"]["subject"] == "Generated Email":
            issues_found.append("Subject is generic - not extracted from Gemini response")
        
        # Check if body contains the full Gemini response
        if "**ANALYSIS**" in mock_response["email"]["body"]:
            issues_found.append("Body contains analysis section - should be parsed")
        
        # Check if analysis is meaningful
        if mock_response["analysis"]["text"] == "Generated by Gemini 2.5 Pro":
            issues_found.append("Analysis is generic - not extracted from Gemini response")
        
        if issues_found:
            print("🔍 Issues found:")
            for i, issue in enumerate(issues_found, 1):
                print(f"   {i}. {issue}")
        else:
            print("✅ No obvious issues found")
        
        print("\n" + "=" * 80)
        print("🎯 FRONTEND RESPONSE TEST COMPLETED!")
        print("=" * 80)
        
        # Summary and recommendations
        print("\n📊 SUMMARY:")
        if issues_found:
            print("⚠️  Response structure needs improvement for better frontend experience")
            print("💡 RECOMMENDATIONS:")
            print("   1. Parse Gemini response to extract actual subject")
            print("   2. Separate email body from analysis")
            print("   3. Send structured analysis data to frontend")
        else:
            print("✅ Response structure looks good for frontend consumption")
        
        print("\n🔧 CURRENT STATUS:")
        print("✅ Server is responding")
        print("✅ Response format is JSON-serializable") 
        print("✅ Frontend will receive structured data")
        print("⚠️  Response parsing can be improved for better UX")
        
    except Exception as e:
        print(f"\n❌ ERROR DURING TESTING!")
        print(f"🔍 Error type: {type(e).__name__}")
        print(f"📝 Error message: {str(e)}")

if __name__ == "__main__":
    test_frontend_response()